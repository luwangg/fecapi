#include "qa_utils.h"

#include <volk_fecapi/volk_fecapi.h>
#include <volk_fecapi/volk_fecapi_prefs.h>

#include <ciso646>
#include <vector>
#include <boost/foreach.hpp>
#include <boost/filesystem.hpp>
#include <iostream>
#include <fstream>
#include <sys/stat.h>
#include <sys/types.h>

namespace fs = boost::filesystem;

int main(int argc, char *argv[]) {

    std::vector<std::string> results;

    //VOLK_PROFILE(volk_fecapi_16i_x5_add_quad_16i_x4, 1e-4, 2046, 10000, &results);
    //VOLK_PROFILE(volk_fecapi_16i_branch_4_state_8, 1e-4, 2046, 10000, &results);
    //VOLK_PROFILE(volk_fecapi_16i_max_star_16i, 0, 0, 204600, 10000, &results);
    //VOLK_PROFILE(volk_fecapi_16i_max_star_horizontal_16i, 0, 0, 204600, 10000, &results);
    //VOLK_PROFILE(volk_fecapi_16i_permute_and_scalar_add, 1e-4, 0, 2046, 10000, &results);
    //VOLK_PROFILE(volk_fecapi_16i_x4_quad_max_star_16i, 1e-4, 0, 2046, 10000, &results);
    //VOLK_PROFILE(volk_fecapi_32fc_x2_conjugate_dot_prod_32fc, 1e-4, 0, 2046, 10000, &results);
    //VOLK_PROFILE(volk_fecapi_32fc_s32f_x2_power_spectral_density_32f, 1e-4, 2046, 10000, &results);
    //VOLK_PROFILE(volk_fecapi_32f_s32f_32f_fm_detect_32f, 1e-4, 2046, 10000, &results);
    //VOLK_PROFILE(volk_fecapi_32u_popcnt, 0, 0, 2046, 10000, &results);
    //VOLK_PROFILE(volk_fecapi_64u_popcnt, 0, 0, 2046, 10000, &results);
    //VOLK_PROFILE(volk_fecapi_32fc_s32fc_multiply_32fc, 1e-4, lv_32fc_t(1.0, 0.5), 204600, 1000, &results);


    char path[1024];
    volk_fecapi_get_config_path(path);

    const fs::path config_path(path);

    if (not fs::exists(config_path.branch_path()))
    {
        std::cout << "Creating " << config_path.branch_path() << "..." << std::endl;
        fs::create_directories(config_path.branch_path());
    }

    std::cout << "Writing " << config_path << "..." << std::endl;
    std::ofstream config(config_path.string().c_str());
    if(!config.is_open()) { //either we don't have write access or we don't have the dir yet
        std::cout << "Error opening file " << config_path << std::endl;
    }

    config << "\
#this file is generated by volk_fecapi_profile.\n\
#the function name is followed by the preferred architecture.\n\
";

    BOOST_FOREACH(std::string result, results) {
        config << result << std::endl;
    }
    config.close();
}

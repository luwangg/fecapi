<?xml version="1.0"?>
<!--
###################################################
# FEC MAKING FOR GREAT JUSTICE
###################################################
 -->
<block>
    <name>CC Def Encoder Definition</name>
    <key>variable_cc_def_fecapi_encoder_def</key>
    <category>FECAPI.encoders</category>
    <import>import fec</import>
    <var_make>
#if int($ndim())==1 #
self.$(id) = $(id) = map( (lambda a: fec.cc_encoder_make($framebits, $k, $rate, $polys, $state_start, $state_end,  $strb.tailbiting, $strb.terminated, $strb.truncated, $strb.streaming )), range(0,$dim1) ); #slurp
#else 
self.$(id) = $(id) = map( (lambda b: map( ( lambda a: fec.cc_encoder_make($framebits, $k, $rate, $polys, $state_start, $state_end, $strb.tailbiting, $strb.terminated, $strb.truncated, $strb.streaming )), range(0,$dim2) ) ), range(0,$dim1)); #slurp
#end if</var_make>
    <make></make>

    <param>
        <name>Ignore Me</name>
        <key>value</key>
        <value>"ok"</value>
        <type>raw</type>
        <hide>all</hide>
    </param>

    <param>
        <name>Threading Dimensions</name>
        <key>ndim</key>
        <value></value>
        <type>enum</type>
        <option>
            <name>2</name>
            <key>2</key>
        </option>
        <option>
            <name>1</name>
            <key>1</key>
        </option>
        
    </param>

    <param>
        <name>Dimension 1</name>
        <key>dim1</key>
        <value>4</value>
        <type>int</type>
        <hide>#if (int($ndim()) >= 1) then 'none' else 'all' #</hide>
    </param>

    <param>
        <name>Dimension 2</name>
        <key>dim2</key>
        <value>4</value>
        <type>int</type>
        <hide>#if (int($ndim()) >= 2) then 'none' else 'all' #</hide>
    </param>
    
    <param>
        <name>Frame Bits</name>
        <key>framebits</key>
        <value>2048</value>
        <type>int</type>
    </param>

    <param>
        <name>Constraint Length (K)</name>
        <key>k</key>
        <value>7</value>
        <type>int</type>
    </param>

    <param>
        <name>Rate Inverse (1/R) (1/2) --> 2</name>
        <key>rate</key>
        <value>2</value>
        <type>int</type>
    </param>
    
    <param>
        <name>Polynomials</name>
        <key>polys</key>
        <value>[79,109]</value>
        <type>int_vector</type>
    </param>

    <param>
        <name>Start State</name>
        <key>state_start</key>
        <value>0</value>
        <type>int</type>
    </param>

    <param>
        <name>End State</name>
        <key>state_end</key>
        <value>-1</value>
        <type>int</type>
    </param>

    <param>
        <name>Streaming Behavior</name>
        <key>strb</key>
        <value></value>
        <type>enum</type>
        <option>
            <name>Streaming</name>
            <key>"streaming"</key>
            <opt>streaming:True</opt>
            <opt>tailbiting:False</opt>
            <opt>terminated:False</opt>
            <opt>truncated:False</opt>
        </option>
        <option>
            <name>Tailbiting</name>
            <key>"tailbiting"</key>
            <opt>streaming:False</opt>
            <opt>tailbiting:True</opt>
            <opt>terminated:False</opt>
            <opt>truncated:False</opt>
        </option>
        <option>
            <name>Terminated</name>
            <key>"terminated"</key>
            <opt>streaming:False</opt>
            <opt>tailbiting:False</opt>
            <opt>terminated:True</opt>
            <opt>truncated:False</opt>
        </option>
        <option>
            <name>Truncated</name>
            <key>"truncated"</key>
            <opt>streaming:False</opt>
            <opt>tailbiting:False</opt>
            <opt>terminated:False</opt>
            <opt>truncated:True</opt>
        </option>
    </param>   

    <doc>
        This instantiates a 1-dim array of encoders or a 2-dim array of encoders
        See Nick if things break.
    </doc>
</block>
